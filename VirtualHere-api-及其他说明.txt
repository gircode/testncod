VirtualHere USB Client 可由其他程序或命令行控制。这在以下情况下非常有用：

您想要在 VirtualHere Client 作为服务运行时对其进行控制
您希望通过仅控制台会话（例如 ssh）来控制客户端
您想通过您选择的编程语言为 VirtualHere 构建自定义图形界面
您想在批处理文件（Windows）或 bash（OSX/Linux）脚本中控制 VirtualHere
当 VirtualHere USB 客户端作为服务或应用程序运行时，它可以通过命名管道进行控制。\\.\pipe\vhclient在 Windows 中，命名管道被称为（用于请求和响应），在 OSX 和 Linux 中被称为/tmp/vhclient（用于请求）和（用于响应）。您可以使用任何程序语言甚至只是命令提示符来控制客户端，不需要特殊的 dll 或语言绑定！命名管道就像一个普通文件。要控制客户端，需要打开命名管道并发送一个文本字符串，格式 为后跟换行符。客户端将执行与指定动词相对应的操作，并在响应管道中返回响应字符串。您甚至可以使用 VirtualHere 客户端二进制文件本身通过参数向客户端的另一个实例发送命令，因此您不必费心编写自己的管道读取器/写入器/tmp/vhclient_response<verb>[,arg]-t

Windows没有像 POSIX 系统（Linux/OSX）中那样的用于重定向的控制台概念，因此如果您从 Windows 批处理文件调用 vhui，则应该使用-r带有文件名的参数来返回结果并解析它（见下文）。

任何人都可以使用 API，无需特殊的 SDK 或程序库！

使用参数运行客户端-t HELP以获取可用命令列表，例如

C:\Users\msbro>vhui64.exe -t 帮助

VirtualHere 客户端 (v5.2.0) API 命令（<> = 必需，[] = 可选，| = 或）：

Anyone can use the API, no special SDK or program library needed!

Run the client with the argument -t HELP to get the list of available commands, e.g

C:\Users\msbro>vhui64.exe -t help

VirtualHere Client (v5.2.0) API commands (<> = required, [] = optional, | = OR):

List devices:
    "LIST"
Get the detailed full client state as an XML Document:
    GET CLIENT STATE
Use a device:
    "USE,<address>[,password]"
Stop using a device:
    "STOP USING,<address>"
Stop using all devices on all clients:
    "STOP USING ALL[,<address>[:port] | <EasyFind address>]"
Stop using all devices just for this client:
    "STOP USING ALL LOCAL"
Device Information:
    "DEVICE INFO,<address>"
Server Information:
    "SERVER INFO,<server name>"
Set device nickname:
    "DEVICE RENAME,<address>,<nickname>"
Rename server:
    "SERVER RENAME,<hubaddress:port>,<new name>"
Turn auto-use all devices on:
    "AUTO USE ALL"
Turn Auto-use all devices on this hub on/off:
    "AUTO USE HUB,<server name>"
Turn Auto-use any device on this port on/off:
    "AUTO USE PORT,<address>"
Turn Auto-use this device on any port on/off:
    "AUTO USE DEVICE,<address>"
Turn Auto-use this device on this port on/off:
    "AUTO USE DEVICE PORT,<address>"
Clear all auto-use settings:
    "AUTO USE CLEAR ALL"
Specify server to connect to:
    "MANUAL HUB ADD,<address>[:port] | <EasyFind address>"
Remove a manually specified hub:
    "MANUAL HUB REMOVE,<address>[:port] | <EasyFind address>"
Remove all manually specified hubs:
    "MANUAL HUB REMOVE ALL"
Add a reverse client to the server:
    "ADD REVERSE,<server serial>,<client address[:port]>"
Remove a reverse client from the server:
    "REMOVE REVERSE,<server serial>,<client address[:port]>"
List all reverse clients:
    "LIST REVERSE,<server serial>"
List manually specified hubs:
    "MANUAL HUB LIST"
List licenses:
    "LIST LICENSES"
License server:
    "LICENSE SERVER,<license key>"
Clear client log:
    "CLEAR LOG"
Set a custom device event:
    "CUSTOM EVENT,<address>,<event>"
Turn auto-find off:
    "AUTOFIND"
Turn reverse lookup off:
    "REVERSE"
Turn reverse SSL lookup on:
    "SSLREVERSE"
Shutdown the client:
    "EXIT"
Help:
    "HELP"

E.g: To get a list of devices, vhui64.exe -t "LIST"
E.g: Use a device, vhui64.exe -t "USE,QNAP.114"
当命令成功时，它将返回“OK”并0返回到 shell；如果命令失败，它将返回“FAILED”并1返回到 shell（例如尝试使用正在使用的设备），或“ERROR：错误字符串”并2返回到 shell（例如，如果服务器不存在或地址无效）。请注意，响应有 5 秒的超时时间。如果 api 调用花费超过 5 秒，它无论如何都会返回 FAILED。



客户端可以针对特定事件调用 Windows 批处理文件或 Bash 脚本。这些事件可通过右键单击 VirtualHere 客户端中的设备并选择“自定义事件处理程序...”来设置。

onClientBeforeBind- 发生在远程设备绑定到客户端之前
onClientAfterBind- 就在...之后
onClientBeforeUnbind- 发生在远程设备与客户端解除绑定之前
onClientAfterUnbind- 就在...之后

 

事件由设备供应商 ID、产品或服务器 USB 端口（可选）限定

例如在Windows中，假设您想在通过 VirtualHere 连接特定打印机时调出打印机对话框。在 VirtualHere 客户端中，右键单击打印机并选择“自定义事件处理程序...”，然后输入以下内容：

onClientAfterBind.$VENDOR_ID$.$PRODUCT_ID$=control printers

并单击“确定”。客户端将用打印机的实际 USB 供应商和产品 ID替换$VENDOR_ID$和，并永久保存此事件。现在，当您在 VirtualHere 客户端中右键单击打印机并选择“使用”时 - 在远程打印机绑定到本地客户端后，将运行批处理文件。客户端将等待脚本退出，因此您应该使用Windows 命令在后台运行它。$PRODUCT_ID$start "control printers"start

如果您想在 Windows 中使用提升的权限$ELEVATE$运行事件批处理文件，只需在条目开头包含该字符串，客户端将在以管理员身份执行之前删除该字符串，例如

onClientAfterBind.$VENDOR_ID$.$PRODUCT_ID$=$ELEVATE$control printers

要删除自定义客户端事件处理程序，请输入特殊值 REMOVE，例如：

onClientAfterBind.$VENDOR_ID$.$PRODUCT_ID$=REMOVE


Client-side Events
Calls to a windows batch file or bash script can be made by the client on certain events. These events are set by right clicking on the device in the virtualhere client and selecting "Custom Event Handler..."

onClientBeforeBind - occurs just before a remote device is bound to the client
onClientAfterBind - just after...
onClientBeforeUnbind - just before a remote device is UNbound from the client
onClientAfterUnbind - just after...

 

Events are qualified by the device vendor id,product or and optionally the server usb port

For example in Windows, say you wanted to bring up the printer dialog when a particular printer is connected via VirtualHere. In the VirtualHere client, right click on the Printer and select "Custom Event Handler..." then enter exactly this:

onClientAfterBind.$VENDOR_ID$.$PRODUCT_ID$=control printers

and click OK. The client will replace the $VENDOR_ID$ and $PRODUCT_ID$ with the actual USB vendor and product id of the printer and save this event permanently. Now when you right click on the Printer in the VirtualHere client and select "Use" - after the remote printer has bound to the local client the batch file start "control printers" will be run. The client will wait for the script to exit so you should use the start windows command to run it in the background.

If you would like to run the event batch file with elevated privileges in Windows just include the $ELEVATE$at the beginning of the entry, the string will be removed by the client before execution as an administrator e.g

onClientAfterBind.$VENDOR_ID$.$PRODUCT_ID$=$ELEVATE$control printers

To remove a custom client event handler, enter the special value REMOVE like this for example:

onClientAfterBind.$VENDOR_ID$.$PRODUCT_ID$=REMOVE



编写了这个前端来与客户端交互。它使一些常用的（对我来说）命令可以轻松地从 Linux 或 Windows 的命令行执行。它可能需要安装几个 Python 模块。

vhutil.py
#!/usr/bin/env python3

import xml.etree.ElementTree as ET
from base64 import decodebytes
import ipaddress
import colorama
import sys
import os
import getpass
import platform
import getopt
import time
if sys.platform == 'win32':
    import win32pipe, win32file, pywintypes

IPCcommands = {
    '-a' : 'auto use device port,{}',
    '-s' : 'stop using,{}',
    '-u' : 'use,{}',
    }
shortopts = 'hpAa:u:s:x:'

helptext = []
helptext.append('Usage: vhutil.py [-h -A -p -u <devnum> | -s <devnum> | -a <devnum> | -x <IPCcommand>]')
helptext.append('\tNo argument shows the list, -h shows this help.')
helptext.append('\t-u or -s uses or stops using a device. -a toggles Auto Use (indicated by **).')
helptext.append('\t is chosen from the white numbers on the left).')
helptext.append('\t-A shows the devices\' addresses, -p asks for a password to be input.')
helptext.append('\tvhutil.py -x "" is equivalent to vhui64 -t "".')
helptext.append('\tTry vhutil.py -x "help"')

wclient = r'\\.\pipe\vhclient' if sys.platform == 'win32' else '/tmp/vhclient'
rclient = r'\\.\pipe\vhclient' if sys.platform == 'win32' else '/tmp/vhclient_response'

class color:
    LM = colorama.Fore.LIGHTMAGENTA_EX
    MA = colorama.Fore.MAGENTA
    CY = colorama.Fore.CYAN
    LC = colorama.Fore.LIGHTCYAN_EX
    BL = colorama.Fore.BLUE
    GR = colorama.Fore.GREEN
    LG = colorama.Fore.LIGHTGREEN_EX
    YE = colorama.Fore.YELLOW
    RE = colorama.Fore.RED
    WH = colorama.Fore.WHITE
    LW = colorama.Fore.LIGHTWHITE_EX
    BRIGHT = colorama.Style.BRIGHT
    UNDERLINE = '\033[4m'
    END = colorama.Style.RESET_ALL

class ClientStateElement():
    def __init__(self, elementTree):
        if elementTree.attrib:
            for k,v in elementTree.items():
                #print(k, v)
                if 'boundConnectionIp' in k and v:
                    ip = decodebytes(v.encode())
                    ip = ipaddress.ip_address(ip)
                    ip = str(ip)
                    #ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', ip)
                    #command = 'host {}'.format(ip)
                    #proc = subprocess.Popen(command, text = True, shell = True, stdout = subprocess.PIPE)
                    #host = proc.stdout.read()
                    #if 'pointer' in host:
                    #    host = host.split('pointer ')[1].replace('.\n', '')
                    #else:
                    #    host = ip
                    setattr(self, k, ip)
                elif 'clientId' == k and v:
                    splitv = v.split() # in case clientId is just 'Username (Username)'
                    if len(splitv) > 1 and splitv[0] in splitv[1]:
                        setattr(self, k, splitv[0])
                elif k in ['idVendor', 'idProduct'] and v:
                    v = int(v)
                    setattr(self, k, "{0:0{1}x}".format(v,4))
                elif v and '=' == v[-1]:
                    setattr(self, k, decodebytes(v.encode()))
                else:
                    setattr(self, k, v)
        else:
            for i, child in enumerate(elementTree):
                tag = child.tag
                if len([a.tag for a in elementTree if tag in a.tag]) > len({a.tag for a in elementTree if tag in a.tag}):
                    tag = child.tag + '_{}'.format(i)
                setattr(self, tag, ClientStateElement(child))

class Opts():
    showAddress = False
    srvnum = 'undefined'
    IPCcommand = 'nodevcommand'
    rerunargs = []
    def __init__(self, argv):
        try:
            self.opts, args = getopt.getopt(argv, shortopts)
        except getopt.GetoptError as err:
            print(err)
            sys.exit(2)
        for opt, arg in self.opts:
            if opt == '-h':
                print('\n'.join(helptext))
                exit()
            if opt in IPCcommands: # interact with a dev
                if arg.isdecimal(): 
                    self.srvnum = int(list(arg)[0]) - 1
                    self.devnum = list(arg)[1:]
                    self.devnum = int(''.join(self.devnum))
                    self.IPCcommand = IPCcommands.get(opt, 'bad flag')
            elif opt == '-A':
                self.showAddress = True
                self.rerunargs.append(opt)
            elif opt == '-x':
                self.srvnum = opt
                self.IPCcommand = arg
        if '-p' in [o for o,a in self.opts] and 'use' in self.IPCcommand:
            devpass = getpass.getpass()
            self.IPCcommand = 'use,{},' + devpass

def isClientRunning():
    if sys.platform == 'win32':
        try:
            isrunning = len(win32file.FindFilesW(wclient)) > 0 #throws an error if the file's not there
        except pywintypes.error as err:
            isrunning = False
    elif sys.platform == 'linux':
        isrunning = os.path.exists(wclient)
    return isrunning

def writeAndReadServer(IPCcommand):
    #print(IPCcommand)
    if sys.platform == 'win32':
        IPCcommand = IPCcommand.encode() + b'\n'
        handle = win32file.CreateFile(wclient, win32file.GENERIC_READ | win32file.GENERIC_WRITE, 
            0, None, win32file.OPEN_EXISTING, win32file.FILE_ATTRIBUTE_NORMAL, None)
        res = win32pipe.SetNamedPipeHandleState(handle, win32pipe.PIPE_READMODE_MESSAGE, None, None)
        exitcode, buf = win32pipe.TransactNamedPipe(handle, IPCcommand, 15000, None)
        buf = buf.decode()
    elif sys.platform == 'linux':
        with open(wclient, 'w') as client:
            client.write(IPCcommand+'\n')
        with open(rclient) as client:
            buf = client.read()
        exitcode = ord(buf[-1:])
        buf = buf[:-1]
    return buf, exitcode

def getClientState():
    xml, exitcode = writeAndReadServer('get client state')
    #print(exitcode)
    clientState = ET.fromstring(xml)
    clientState = ClientStateElement(clientState)
    return clientState

def makeServerLine(connection):
    #for k in connection.__dict__.items(): print(*k)
    line = f'  {color.LM}Server: {connection.serverName}{color.END} ({connection.hostname}.{connection.port})'
    return line

def makeDeviceLine(nickname, device, hostname, srvnum, devnum, showAddress):
    #for k in device.__dict__.items(): print(*k)
    num = int('{0}{1}'.format(srvnum + 1, devnum))
    line = f'    {num:3} {color.GR}{nickname}'
    autoUse = '' 
    if hasattr(device, 'autoUse'):
        autoUse = '' if device.autoUse == 'not-set' else '**'
    if showAddress:
        line = f'{line} {color.YE}({hostname}.{device.address})'
    if device.state == '3':
        if platform.node() == device.boundClientHostname:
            line = f'{color.BRIGHT}{line} {color.LW}(In use by you){color.END}'.replace(color.GR, color.LG)
        else:
            line = f'{line} {color.WH}(In use by: {color.LC}{device.clientId} at {device.boundClientHostname}{color.END})'
    return line + color.END + autoUse

def main(argv):
    #### Parse the args
    opts = Opts(argv)
    #### Parse the state of the server
    clientstate = getClientState()
    vhlist = ['VirtualHere devices:']
    alldevices = []
    for i, (key, server) in enumerate(clientstate.__dict__.items()):
        vhlist.append(makeServerLine(server.connection))
        devices = {k:v for k,v in server.__dict__.items() if 'device' in k}
        sorted_devices = {}
        for k,v in devices.items():
            v.nickname = v.product if not v.nickname else v.nickname
            sorted_devices[v.nickname] = v
        sorted_devices = sorted(sorted_devices.items())
        alldevices.append(sorted_devices)
        for j, (nickname, device) in enumerate(sorted_devices):
            vhlist.append(makeDeviceLine(nickname, device, server.connection.hostname, i, j, opts.showAddress))
    
    #### Do the action
    if opts.srvnum == '-x':
        IPCresp, exitcode = writeAndReadServer(opts.IPCcommand)
        print(IPCresp)
        exit()
    if opts.srvnum != 'undefined':
        srvstr = 'server_{}'.format(opts.srvnum) if len(clientstate.__dict__) > 1 else 'server'
        thisdev = alldevices[opts.srvnum][opts.devnum][1]
        
        thisaddress = getattr(clientstate, srvstr)
        thisaddress = '{}.{}'.format(thisaddress.connection.hostname, thisdev.address)
        if opts.IPCcommand != 'nodevcommand':
            opts.IPCcommand = opts.IPCcommand.format(thisaddress)
            IPCresp, exitcode = writeAndReadServer(opts.IPCcommand)
            if 'FAILED' in IPCresp and '-u' in [o for o,a in opts.opts] and thisdev.state == '1':
                # If it fails to be "used", but is unused (state == 1), it's probably PW protected
                opts.rerunargs = argv
                opts.rerunargs.append('-p')
                if opts.rerunargs.count('-p') > 3:
                    opts.rerunargs = [e for e in opts.rerunargs if e in ['-A']]
                    print('Three incorrect passwords given, skipping.')
            elif 'OK' not in IPCresp:
                print(r'{}Warning: The command "{}" returned "{}".{}'.format(color.RE, opts.IPCcommand, IPCresp, color.END))
        main(opts.rerunargs)
    else:
        vhlist.append('\nUsage: vhutil.py [-h -A -p -u <devnum> | -s <devnum> | -a <devnum> | -x <IPCcommand>]')
        vhlist.append('\tNo argument shows the list, -h shows help.')
        print('\n'.join(vhlist))

if '__main__' == __name__:
    colorama.init()
    if isClientRunning():
        main(sys.argv[1:])
    else:
        print('Please start a VH client')
    colorama.deinit()
	
	

User/Device Authorization

Scripting is now also supported on the VirtualHere Windows Server using batch files instead of bash scripts, the return codes are identical to the linux/osx values as described below

The ClientAuthorization script

VirtualHere supports user authorization whereby specific users can be granted/denied access to specific devices. This is useful for example to protect remote access to security dongles by certain users, or limit the number of shared devices per user.

Make sure the VirtualHere Server is not running, then add the clientAuthorization setting to the server configuration file. This setting specifies the bash script to run to perform authorization and passes it specific parameters replaced at runtime with actual values for the current user and the device they are attempting to use. The CLIENT_ID is passed in by the VirtualHere client to the server. It is automatically set to the same username used to login to the current operating system session under Windows / OSX / Linux. OR you can ask for the username by returning 3 from the clientAuthorization script

Once the config.ini file is changed and the server started, you can modify the authorization script at any time without restarting the server

$VENDOR_ID$ - The USB Device vendor id, in hex e.g "05ac"
$PRODUCT_ID$ - The USB Device product id in hex hex e.g "12a4"
$CLIENT_ID$ - The format is <full name><space><open bracket><username><close bracket> .eg "John Smith (jsmith)"
$CLIENT_IP$ - e.g "192.168.2.60"
$CLIENT_HOSTNAME$ - e.g "WIN10-DEVELOP"
$PRODUCT_SERIAL$ - This is the USB Device serial number e.g "2c89237021"
$PASSWORD$ - This setting is optional and is the password entered by the user when attempting to use the device. The password is encoded as an MD5 hash value
$DEVPATH$ - The device path on the server e.g /sys/bus/usb/devices/1-1
$NICKNAME$ - The nickname of the device (if set)
$NUM_BINDINGS$ - the number of devices this user is currently using.
Example 1 : Linux Example

For example, the following setting specifies the bash script auth.sh to perform authorization and passes it 9 runtime parameters (all on one line)

clientAuthorization=/home/root/auth.sh "$VENDOR_ID$" "$PRODUCT_ID$" "$CLIENT_ID$" "$CLIENT_IP$" "$PRODUCT_SERIAL$" "$PASSWORD$" "$DEVPATH$" "$NICKNAME$" "$NUM_BINDINGS$"
Create a new file called auth.sh in the directory specified in the line above (e.g /home/root) and add the following example code (This code will deny access to everyone except the username "michael" with a password "mypassword"). Change it to suit your needs.

#!/bin/bash
# Example script for performing basic user authorization for virtualhere
# Also includes a simple password protection mechanism for accessing a device
# Return 3 if the user needs to provide a username AND password (or the password is incorrect) to use the device
# Return 2 if the user needs to provide ONLY a password (or the password is incorrect) to use the device. The username defaults to the client OS username
# Return 1 if the user is allowed to access this device
# Return 0 if the user is not allowed to access this device
# Parameters are passed in as:
# $1 = VENDOR_ID
# $2 = PRODUCT_ID
# $3 = CLIENT_ID
# $4 = CLIENT_IP
# $5 = PRODUCT_SERIAL
# $6 = PASSWORD
# $7 = DEVPATH
# $8 = NICKNAME
# $9 = NUM_BINDINGS
logger "Authorizing -> '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
# "mypassword" = "34819d7beeabb9260a5c854bc85b3e44" as an MD5 hash
if [ "$6" == "34819d7beeabb9260a5c854bc85b3e44" ]; then
echo "Password ok"
else
exit 2
fi
if [[ "$3" == *"(michael)"* ]]; then
logger "Authorized!"
exit 1
else
logger "NOT authorized"
exit 0
fi

Save the file and give it execute permissions chmod +x /home/root/auth.sh

Now when you start the server it will call this script every time a client attempts to Use a device. You can use the other parameters passed in to perform more specific authorization, for example using the device product ID or client IP or password based on the type of device and so forth.

Example 2 : Windows Example

Here is a example script that performs the same function as the Linux script above. Change the username from michael to your username. Try using a device first, let it fail and look in the log.txt file for all the details you can compare on.

Put this line into the config.ini after you have stopped and exited the VirtualHere Windows server (change path to where you will put the auth.bat file)

clientAuthorization=C:/Users/michael/auth.bat "$VENDOR_ID$" "$PRODUCT_ID$" "$CLIENT_ID$" "$CLIENT_IP$" "$PRODUCT_SERIAL$" "$PASSWORD$" "$DEVPATH$" "$NICKNAME$" "$NUM_BINDINGS$"
Then put this in the auth.bat file:

@echo off
rem Example script for performing basic user authorization for virtualhere in windows
rem Also includes a simple password protection mechanism for accessing a device
rem Return 3 if the user needs to provide a username AND password (or the password is incorrect) to use the device
rem Return 2 if the user needs to provide only a password (or the password is incorrect) to use the device
rem Return 1 if the user is allowed to access this device
rem Return 0 if the user is not allowed to access this device
rem Parameters are passed in as:
rem %1 = VENDOR_ID
rem %2 = PRODUCT_ID
rem %3 = CLIENT_ID
rem %4 = CLIENT_IP
rem %5 = PRODUCT_SERIAL
rem %6 = PASSWORD
rem %7 = DEVPATH
rem %8 = NICKNAME
rem %9 = NUM_BINDINGS
rem for help debugging this script, look in the file log.txt to see the arguments passed in
rem and the result of the IF statements below
echo %1 > log.txt
echo %2 >> log.txt
echo %3 >> log.txt
echo %4 >> log.txt
echo %5 >> log.txt
echo %6 >> log.txt
echo %7 >> log.txt
echo %8 >> log.txt
echo %9 >> log.txt
rem "mypassword" = "34819d7beeabb9260a5c854bc85b3e44" as an MD5 hash
rem go here https://passwordsgenerator.net/md5-hash-generator to determine the MD5 hash for the password you want to use
IF %6=="34819d7beeabb9260a5c854bc85b3e44" (
  echo "Password ok" >> log.txt
) ELSE (
  echo "Password invalid" >> log.txt
  exit 2
)
ECHO %3 | FIND "(michael)" >Nul
if errorlevel 1 (
  echo "NOT authorized" >> log.txt
  EXIT 0
) ELSE (
  echo "Authorized!" >> log.txt
  exit 1
)
Example 3 : A more complicated Linux Example

Thanks to user ben at wildblue de, here is an advanced configuration script with logging and detailed authentication

Example 4: An example of generating a unique daily password for device access (Thanks to user phassmann!)

1. Put this on a webpage the user visits first (Note for myowncryptcode replace that with a made up secret key)

<?php
$d = date("Ymd")."myowncryptcode";
echo "Password is: ".crc32($d);
?>
2. Put this in the auth.sh script on the server

#!/bin/sh
logger "Authorizing -> '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
		code=myowncryptcode
		checksum="$(date '+%Y%m%d')${code}"
		crc="$(echo -n "$checksum" | gzip -c | tail -c8 | hexdump -n4 -e '"%u"')"
		hash="$(echo -n "$crc" | md5sum )"
		pass="${hash%%??}"
#Set a password if a special device used by VendorID
#if [ $1 = "0529" ]
#	then
#		pass="f09730023eacbc6e5f1827db89fca2db"
#	fi
#AutoLogin by Username
#if [ $3 = "(Patrick)" ]
#	then
#				exit 1
#	fi
#Autologin by IP
#if [ $4 = "84.187.157.22" ]
#	then
#				exit 1
#	fi
if [ $6 = $pass ]
	then 
		exit 1
		echo "Entered Pass ok:	$6"
		echo "Login ok!"
	else
		exit 2
		echo "Entered Pass failure:	$6"
	fi
The ClientDeauthorization script

The ClientDeauthorization setting is identical to the ClientAuthorization script but is called when a user disconnects from a device. The parameters sent to the script are identical to the ClientAuthorization script except the script is not required to return a value of 1 or 0. Using both the ClientAuthorization and ClientDeauthorization script makes it easy to track user-device usage e.g for logging and accounting purposes.

The OnDeviceKick script

When a client runs in adminstrator mode (using the -a argument when starting the client) the administrator can kick another user off a device by right clicking on the in-use device and selecting "Disconnect from User". If you would like to restrict which administrators can kick which users of which devices you can use the OnDeviceKick setting in the server config.ini file to specify a script to run to determine the action to be taken. This script is similar to the scripts above but should return 1 if the user can be kicked from the device and 0 otherwise.

For example, the following setting specifies the bash script onDeviceKick.sh and passes it 8 runtime parameters (all on one line)

onDeviceKick=/home/root/onDeviceKick.sh "$VENDOR_ID$" "$PRODUCT_ID$" "$KICKER_ID$" "$KICKER_IP$" "$CLIENT_ID$" "$CLIENT_IP$" "$PRODUCT_SERIAL$" "$DEVPATH$" "$NICKNAME$"
Create a new file called onDeviceKick.sh in the directory specified in the line above (e.g /home/root) and add the following example code (This code will deny administrator kicking abilities to everyone except the username "michael"). Change it to suit your needs.

#!/bin/bash
# Example script for controlling who can kick off a user from a device,
# this script blocks all administrators from kicking except for michael
# Return 1 if the user can be kicked off the in-use device
# Return 0 if the user can NOT be kicked off an in-use device
# Parameters are passed in as:
# $1 = VENDOR_ID
# $2 = PRODUCT_ID
# $3 = KICKER_ID
# $4 = KICKER_IP
# $5 = CLIENT_ID
# $6 = CLIENT_IP
# $7 = PRODUCT_SERIAL
# $8 = DEVPATH
# $9 = NICKNAME
logger "OnDeviceKick -> '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
f [[ "$3" == *"(michael)"* ]]; then
logger "OK"
exit 1
else
logger "No"
exit 0
fi

Save the file and give it execute permissions chmod +x /home/root/onDeviceKick.sh

Now when you start the server it will call this script every time an administrator attempts to Disconnect from User a device. You can use the other parameters passed in to perform more specific qualification, for example using the device product ID or client IP and so forth



VirtualHere 支持客户端/服务器通信的安全套接字层 ( SSL )。这在通过互联网共享 USB 设备时非常有用，可以提供更好的防窃听保护。服务器证书和可选的客户端 SSL 证书均受支持。

重要的：

确保您正在运行最新的 VirtualHere 服务器和 VirtualHere 客户端，因为以下设置适用于最新版本
如果存在 SSL 配置问题，错误将显示在服务器上的系统日志中，以及客户端上的系统消息中
SSL 支持需要购买服务器
VirtualHere 在端口 7574 上运行 SSL
SSL 也可以在EasyFind上运行
先决条件（使用OpenSSL）

生成自签名 CA（如果使用商业 CA，请跳过此步骤）
openssl genrsa -out ca.key 2048
openssl req -new -sha256 -x509 -days 3650 -key ca.key -out ca.crt
openssl x509 -in ca.crt -out ca.pem -outform PEM

生成自签名服务器证书（或从证书颁发机构购买）
openssl genrsa -out server.key 2048
openssl req -new -key server.key -out server.csr
openssl x509 -req -sha256 -days 3650 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 02 -out server.crt
cat server.key server.crt > server.pem

适用于 Linux/Windows/OSX 的 VirtualHere USB 服务器

确保 VirtualHere 服务器未运行
编辑服务器config.ini文件
添加设置并将其设置为上面生成sslCert的完整路径server.pem
保存config.ini文件并启动 VirtualHere 服务器
如果你正在使用 VirtualHere Android 服务器

将文件复制server.pem 到 Android 设备上的 SD 卡存储，或者例如 Google Drive。
在 VirtualHere 应用程序中，单击菜单 -> SSL...-> 加载证书 ->server.pem从上一步中保存文件的位置中选择
在客户端上：在客户端计算机上保存服务器证书 CA 文件（ca.pem见上文），然后右键单击 USB 集线器->高级设置->SSL->证书颁发机构文件，并将位置放在那里。该证书颁发机构将被添加到客户端受信任列表中。如果您不添加此参数，则无法验证服务器证书，SSL 连接将无法继续，客户端的系统日志中将出现消息，提示您执行此操作。

当服务器启动时，VirtualHere 客户端将通过默认 SSL 端口 7574 自动使用 TLSv1.2 连接到 VirtualHere 服务器。如果您不使用“自动查找”，则需要在“指定集线器...”菜单项中输入端口为 7574 的服务器详细信息。

注意：当以服务形式运行客户端时，您不能使用任何需要密码的 SSL pem 文件

EasyFind 上的 SSL

EasyFind 上的 SSL 不需要特殊设置，其工作方式与上述普通 SSL 配置相同。只需确保 EasyFind 客户端已按上述设置 ca.pem（例如，通过电子邮件将 ca.pem 发送给远程用户，以便他们配置其客户端）

如果您想使用客户端证书

生成自签名客户端证书（或从 CA 获取证书）
生成客户端私钥：
使用密码： 编辑 VirtualHere 客户端 使用指定上面生成的客户端证书文件的完整路径 保存 客户端配置文件并启动客户端openssl genrsa -des3 -out client.key 2048 or without passphrase openssl genrsa -out client.key 2048
openssl req -new -key client.key -out client.csr
openssl x509 -req -days 3650 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt
cat client.key client.crt > client.pem
configuration file
SSLClientCert=c:/path/to/client.pem in the [General] section

停止服务器并编辑config.ini并添加设置
SSLUseClientCerts=1
SSLCAFile=/path/to/ca.pem
启动服务器

注意：如果您想要为特定连接使用特定客户端证书，则需要使用服务器主机名冒号端口和管道符号来限定客户端证书路径。如果路径名不合格，它将用于所有其他连接。使用逗号分隔条目，例如：

SSLClientCert=c:/path/to/general/client.pem,ubuntu-2.local.:7575|c:/path/to/ubuntu2/specific/cert.pem,ubuntu-3.local.:7575|c:/path/to/ubuntu3/specific/cert.pem

撤销客户端证书

服务器支持使用 CRL 撤销客户端证书。为此，请SSLUseCRL=1在服务器config.ini中添加参数。当客户端证书需要撤销时，将其 PEM 格式的 CRL 附加到参数中指定的ca.pemSSLCAFile文件中。更新ca.pem文件时，您无需停止服务器，文件更改时服务器会自动获取撤销信息。


VirtualHere 非常适合 OEM 集成，因为：

带上您自己的设备- 将任何基于 Linux 的设备变成 USB 服务器！例如 raspberry pi0/1/2/3/4/5、台式机、路由器、交换机、刀片服务器或您的定制 PCB！您可以选择最具成本效益且最适合您使用的硬件。
服务器完全是用户空间的- 这比基于内核的解决方案更稳定且更易于更新。在用户空间运行意味着任何服务器问题都不会导致整个服务器设备崩溃。
该服务器完全独立， 可在任何版本的 Linux 内核和任何架构上运行！这使 OEM 部署变得简单，除了基本的 Linux 内核之外，服务器设备上不需要任何其他东西。（例如，VirtualHere CloudHub 固件大小为 4MB，包括 Linux 内核和管理 GUI！）
所有设置都存储在一个简单的文本文件中，该文件自动生成合理的默认值 - 无需复杂的注册表设置
单位成本极具竞争力
积极的产品开发和频繁的修复/改进/更新（更新/错误修复是免费的！）
单个服务器最多可共享 122 个设备，深度可达 6 个集线器
允许使用简单的 bash 脚本进行细粒度身份验证。轻松创建或连接到您现有的身份验证后端
支持安全套接字层 (SSL)，以便在互联网上共享时更好地防止窃听
通过简单的脚本轻松解决设备问题
使用开放的Bonjour协议在网络上广播其服务，这允许客户端自动查找服务器
所有 USB 通信都在单个 TCP 端口 (7575) 上进行，因此设置防火墙和远程访问非常容易，并且操作无需互联网访问
新功能：现在支持VirtualHere EasyFind 系统，无需网络设置，可从任何地方连接到您的服务器！
IPV6 支持
客户端可以作为服务运行，并可通过任何人都可以使用的易于使用的API进行控制
客户端是单个可执行文件，没有任何依赖项
可以针对您的特定 CPU 架构进行自定义编译


VirtualHere 服务器事件系统
Michael 于 提交星期三, 2014/01/15 - 10:53#1
VirtualHere 服务器可以针对某些事件同步执行服务器脚本。有时 USB 设备需要向其发送某些命令来解决其内置差异（或怪癖）。您还可以使用此事件系统进行特殊日志记录，例如绑定/解除绑定设备以用于基于时间的使用等其他用例。请确保您运行的任何脚本都很快，因为它们与事件的操作同步。

VirtualHere 服务器处理此问题的方式是提供回调机制，在服务器事件发生时调用要执行的bash脚本（Linux/OSX 服务器）或批处理文件（Windows）。每个回调都指定为服务器配置文件中的一行。

指定事件类型 和点，然后是供应商 ID，以及可选的点和指定事件的产品 ID 。如果没有指定产品 ID，则该供应商的所有产品都会执行事件脚本。如果没有限定，则适用于所有设备。

例如，当远程 virtualhere 客户端使用 iPad 时运行的脚本可以是（在服务器config.ini中写入一行）

onBind.05ac.12ab=cat $DEVPATH$/bNumConfigurations > $DEVPATH$/bConfigurationValue

onBind是事件、05ac是Apple USB Vendor Id、12ab 是Product Id，VirtualHere 会$DEVPATH$在运行时用内核设备路径替换。 

这几行的作用是将 iPad 配置设置为设备被远程客户端“使用”时支持的最大配置号。 

请参阅本页底部的另一个示例。

对于每个事件，您至少可以传递以下参数：

$ADDRESS$- 唯一整数 id，代表服务器上 USB 设备的总线地址
$PRODUCT_ID$- 设备的 4 位十六进制 USB 产品 ID
$VENDOR_ID$- 设备的 4 位十六进制 USB 供应商 ID
$DEVPATH$- 操作系统用来表示设备的唯一 USB 路径
这些是 VirtualHere 服务器提供回调的事件。一些事件有可以传递的额外参数，这些参数如下所示。[ ]表示可选限定符

onBind[.<vendor_id>[.<product_id>]]- 当用户在 VirtualHere 客户端中右键单击 USB 设备并选择“使用”时发生

您还可以在此事件中使用这些变量：

$CLIENT_IP$  - 尝试远程使用 USB 设备的远程 VirtualHere 客户端的 IP 地址。
$CLIENT_HOSTNAME$  -远程 VirtualHere 客户端的主机名（如果有）。
$CONNECTION_ID$- 客户端和服务器之间的连接会话的唯一整数 ID。每次建立新连接时，该 ID 都会发生变化。这对于了解连接是否断开并返回很有用，因为连接 ID 会有所不同。
$NICKNAME$- 设备的昵称（如果已设置）。用户在 VirtualHere 客户端中右键单击设备并选择“设备属性” -> “重命名”即可设置
$SERIAL$- USB 设备的序列号（如果存在）
$PRODUCT$- 供应商提供的 USB 设备的产品名称
onEnumeration[.<vendor_id>[.<product_id>]]- 当 USB 设备进行枚举时发生。枚举是指服务器上的操作系统检测到 USB 设备首次连接时发生的。

您还可以在此事件中使用这些变量：

$NICKNAME$- 设备的昵称（如果已设置）
$SERIAL$- USB 设备的序列号（如果存在）
$PRODUCT$- 供应商提供的 USB 设备的产品名称
onDeviceUnplug[.<vendor_id>[.<product_id>]]- 当 USB 设备从服务器上物理拔出时发生

您还可以在此事件中使用这些变量：

$NICKNAME$- 设备的昵称（如果已设置）
$SERIAL$- USB 设备的序列号（如果存在）
$PRODUCT$- 供应商提供的 USB 设备的产品名称
onReset[.<vendor_id>[.<product_id>]]- 当需要“重置”设备时发生，这意味着逻辑拔出/重新插入，而不是物理移除

onPassToKernel[.<vendor_id>[.<product_id>]]- 当 USB 设备未通过 VirtualHere 使用并重新连接到服务器内核时发生。

onClearHalt[.<vendor_id>[.<product_id>]]- 当 USB 设备端点应用USB Clear Halt请求时发生

onResetEp[.<vendor_id>[.<product_id>]]- 当 USB 设备应用重置端点操作时发生

onUnbind[.<vendor_id>[.<product_id>]]- 当设备与用户解除绑定时发生 - 即当用户在 VirtualHere 客户端中选择停止使用时。

您还可以在此事件中使用这些变量： 

$SURPRISE_UNBOUND$1。如果设备在客户端当前正在使用时从服务器拉出，则将替换为。
$CLIENT_ID$- 登录 VirtualHere 客户端并选择“停止使用”的用户的操作系统用户名/名称
$CLIENT_IP$  - 远程 VirtualHere 客户端的 IP 地址 
$CONNECTION_ID$- 客户端和服务器之间的连接会话的唯一整数 ID。每次建立新连接时都会发生变化
$NICKNAME$- 如果设置了设备昵称。
onServerRename- 当用户尝试通过右键单击服务器并选择服务器属性->重命名来重命名服务器时，将调用此事件。**注意：如果您1从脚本返回，则会发生重命名，否则，任何其他操作（或无任何操作）和重命名都不会发生。**

您还可以在此事件中使用这些变量： 

$NEW_NAME$- 尝试设置的服务器的新名称
$CLIENT_ID$- 登录 virtualhere 客户端并尝试重命名服务器的用户的操作系统用户名/名称。
$CLIENT_IP$  - 尝试重命名的远程 VirtualHere 客户端的 IP 地址。
$CONNECTION_ID$- 客户端和服务器之间的连接会话的唯一整数 ID。每次建立新连接时都会发生变化
onChangeNickname- 当用户在 VirtualHere 客户端中右键单击 USB 设备并选择设备属性 -> 重命名时，将调用此事件。**注意：如果您返回0昵称将被接受，其他任何内容和昵称都不会改变。**

您还可以在此事件中使用这些变量： 

$NICKNAME$- USB 设备的现有昵称
$NEW_NICKNAME$- USB 设备的新昵称
$CLIENT_ID$- 登录 virtualhere 客户端并尝试重命名设备的用户的操作系统用户名/名称
$CLIENT_IP$  - 尝试重命名的远程 VirtualHere 客户端的 IP 地址。
0使用此事件，您可以通过返回或1并通过变量限定用户来阻止某些（或所有）用户重命名 USB 设备$CLIENT_ID$。

onDeviceIgnore- 当用户右键单击设备并选择“忽略”时，将调用此事件。**注意：如果您返回0忽略，将被默默拒绝；如果您返回1忽略，将被接受；如果您返回2忽略，将被拒绝，并向客户端发送一条消息，提示“未经授权的操作”。**

您还可以在此事件中使用这些变量： 

 $CLIENT_ID$- 登录 virtualhere 客户端并尝试忽略该设备的用户的操作系统用户名/名称
$CLIENT_IP$  - 尝试忽略的远程 VirtualHere 客户端的 IP 地址。
$CLIENT_HOSTNAME$  -远程 VirtualHere 客户端的主机名（如果有）。
$SERIAL$- 被忽略的 USB 设备的序列号
onDeviceUnignore- 当用户尝试取消忽略某个设备时，将调用此事件。通过右键单击 VirtualHere 客户端上的服务器，选择服务器属性-> (取消忽略 )   ，即可取消忽略设备**注意：如果您返回，0则取消忽略将被默默拒绝；如果您返回，则取消1忽略将被接受；如果您返回，则2取消忽略将被拒绝，并向客户端发送一条消息，提示“未经授权的操作”**

您还可以在此事件中使用这些变量： 

 $CLIENT_ID$- 登录 virtualhere 客户端并尝试取消忽略该设备的用户的操作系统用户名/名称
$CLIENT_IP$  - 尝试删除忽略的远程 VirtualHere 客户端的 IP 地址
$CLIENT_HOSTNAME$  -远程 VirtualHere 客户端的主机名（如果有）。
 $UNIGNORE$- 这是包含 USB VendorId、USB Product Id 和 Serial 的字符串，与要删除的忽略项串联起来
onAddReverseClient- 当用户尝试通过客户端将反向客户端添加到服务器时，将调用此事件。反向客户端是服务器将尝试连接的远程客户端的 IP 地址。**注意：如果您返回，1则将添加反向客户端，否则将不会添加。**

您还可以在此事件中使用这些变量： 

 $CLIENT_ID$- 登录 virtualhere 客户端并尝试添加新反向客户端 IP 地址的用户的操作系统用户名/名称，方法是右键单击服务器并选择“反向客户端...” -> “添加”
$CLIENT_IP$  - 尝试添加反向客户端的远程 VirtualHere 客户端的 IP 地址。
onRemoveReverseClient- 当用户尝试通过客户端从服务器删除反向客户端时，会调用此事件。 **注意：如果返回，则1反向客户端将被删除，否则，它将不会被删除。** 

您还可以在此事件中使用这些变量： 

 $CLIENT_ID$- 登录 virtualhere 客户端并尝试删除反向客户端 IP 地址的用户的操作系统用户名/名称，方法是右键单击服务器并选择“反向客户端...” -> “删除”
$CLIENT_IP$  - 尝试删除反向客户端的远程 VirtualHere 客户端的 IP 地址。
onClientConnect- 当新客户端连接到服务器时调用此事件。 

您还可以在此事件中使用这些变量： 

$CLIENT_IP$- 即将连接的远程 VirtualHere 客户端的 IP 地址
 $CONNECTION_ID$- 分配给客户端连接的唯一 ID 号。稍后您可以使用此 ID 来匹配断开连接。
onClientDisconnect- 当客户端与服务器断开连接时调用此事件。 

您还可以在此事件中使用这些变量： 

$CONNECTION_ID$- 分配给客户端连接会话的唯一 ID 号。
$REASON$- 断开连接的原因。它被替换为字符串timeout或server shutdown
$CLIENT_ID$- 登录 virtualhere 客户端并已断开连接的用户的操作系统用户名/名称
这里还有一些授权/身份验证事件

例子：

在服务器config.ini文件中，一行可能包含：

onUnbind.4ca.3911=/home/vh/onUnbind.sh "$DEVPATH$" "$ADDRESS$" "$VENDOR_ID$" "$PRODUCT_ID$"

在onUnbind.sh文件中：

#!/bin/sh

logger onUnbind "$1" "$2" "$3" "$4"

系统日志中的输出：

onUnbind "/sys/bus/usb/devices/2-2" "22" "4ca" "3911"